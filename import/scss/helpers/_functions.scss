// @use 'sass:math';

@function to-rems($px) {
    $rems: math-div($px, 16px) * 1rem;
    @return $rems;
}

@function math-div( $first , $second ) {
  @return ($first / $second);
}

@function math-round( $number ) {
  $rounded_number : floor( $number + 0.5);
  @return $rounded_number;
}

// 
@function math-pow($base, $exponent) {
  $result: 1;
  $abs_exponent: abs($exponent);
  
  @if $abs_exponent == 0 {
    @return 1;
  }
  
  @for $_ from 1 through $abs_exponent {
    $result: $result * $base;
  }
  
  @if $exponent < 0 {
    @return 1 / $result;
  }
  
  @return $result;
}

@function rnd($number, $places: 0) {
    $n: 1;
    @if $places > 0 {
      @for $i from 1 through $places {
        $n: $n * 10;
      }
    }
    @return math-div(math-round($number * $n), $n);
}


@function clamped($min-px, $max-px, $min-bp, $max-bp) {
    $slope: math-div($max-px - $min-px, $max-bp - $min-bp);
    $slope-vw: rnd($slope * 100, 2);
    $intercept-rems: rnd(to-rems($min-px - $slope * $min-bp), 2);
    $min-rems: rnd(to-rems($min-px), 2);
    $max-rems: rnd(to-rems($max-px), 2);
    @return clamp(#{$min-rems}, #{$slope-vw}vw #{"+"} #{$intercept-rems}, #{$max-rems});
}

@function Clamped($min-px, $max-px, $min-bp, $max-bp) {
  @return clamped($min-px , $max-px , $min-bp , $max-bp );
}

@function widthCalc( $fraction ) {
    @return 100% * $fraction;
}

// Test if `$value` is a valid direction
// @param {*} $value - Value to test
// @return {Bool}
@function is-direction($value) {
  $index-keyword : false;
  $index-unit : false;

  $direction-list : (to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left);
  $unit-direction-list : ( 'deg' , 'grad' , 'turn' , 'rad' );
  
  $index-keyword : index($direction-list, $value);
  @if  $index-keyword == null  {
    $index-unit : index( $unit-direction-list , unit($value));
  }
  @return $index-keyword or $index-unit;
}

// Convert a direction to legacy syntax
// @param {Keyword | Angle} $value - Value to convert
// @require {function} is-direction
// @require {function} convert-angle
// @throw Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.;
@function legacy-direction($value) {
  @if is-direction($value) == false {
    @error "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
  }

  $conversion-map: (
    to top          : bottom,
    to top right    : bottom left,
    to right top    : left bottom,
    to right        : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom       : top,
    to bottom left  : top right,
    to left bottom  : right top,
    to left         : right,
    to left top     : right bottom,
    to top left     : bottom right
  );

  $index : index($conversion-map, $value);
  @if $index {
    @return nth($conversion-map, $index);
  }

  @return 90deg - $value;
}